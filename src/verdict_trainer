import json
from transformers import DistilBertTokenizerFast, DistilBertForSequenceClassification, AdamW
import random
import torch
from torch.utils.data import DataLoader
from sklearn.metrics import accuracy_score

#%%

with open('news_dataset.json', 'r') as json_file:
    json_data = json.load(json_file)


politifacts = json_data['politifacts']
random.shuffle(politifacts)
texts = []
labels = []
for fact in politifacts:
    text = 'Title: ' + fact['title'] + '\n' + 'Claims: ' + fact['claims'] + '\n' + 'Evidence:' + '\n' + fact['evidence']
    label = int(fact['verdict'])
    texts.append(text)
    labels.append(label)

train_texts, test_texts = texts[:-int(len(texts) * 0.1)], texts[-int(len(texts) * 0.1):]
train_labels, test_labels = labels[:-int(len(labels) * 0.1)], labels[-int(len(labels) * 0.1):]

#%%

tokenizer = DistilBertTokenizerFast.from_pretrained('distilbert-base-uncased')
train_encodings = tokenizer(train_texts, truncation=True, padding=True)
test_encodings = tokenizer(test_texts, truncation=True, padding=True)

#%%

class PolitifactDataset(torch.utils.data.Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels

    def __getitem__(self, idx):
        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
        item['labels'] = torch.tensor(self.labels[idx])
        return item

    def __len__(self):
        return len(self.labels)

train_dataset = PolitifactDataset(train_encodings, train_labels)
test_dataset = PolitifactDataset(test_encodings, test_labels)

#%%

device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')

model = DistilBertForSequenceClassification.from_pretrained('distilbert-base-uncased')
model.to(device)
model.train()

train_loader = DataLoader(train_dataset, batch_size=8, shuffle=True)

optim = AdamW(model.parameters(), lr=5e-5)

for epoch in range(3):
    print('Starting Epoch', epoch)
    for batch in train_loader:
        optim.zero_grad()
        input_ids = batch['input_ids'].to(device)
        attention_mask = batch['attention_mask'].to(device)
        labels = batch['labels'].to(device)
        outputs = model(input_ids, attention_mask=attention_mask, labels=labels)
        loss = outputs[0]
        loss.backward()
        optim.step()

#%%
print('Testing the model')
# Set the model to evaluation mode
model.eval()

# Data loader for the test dataset
test_loader = DataLoader(test_dataset, batch_size=8, shuffle=False)

# Lists to store predictions and actual labels
predictions = []
true_labels = []

# Iterate through the test dataset and make predictions
with torch.no_grad():
    for i, batch in enumerate(test_loader):
        print('Running:', i+1, '/', len(test_loader))
        input_ids = batch['input_ids'].to(device)
        attention_mask = batch['attention_mask'].to(device)
        labels = batch['labels'].to(device)
        outputs = model(input_ids, attention_mask=attention_mask)
        logits = outputs.logits

        # Get predicted labels
        predictions.extend(torch.argmax(logits, dim=1).cpu().numpy())
        
        # Get true labels
        true_labels.extend(labels.cpu().numpy())

# Calculate accuracy
accuracy = accuracy_score(true_labels, predictions)
print('Accuracy:', accuracy)

#%%

torch.save(model.state_dict(), 'distilbert_politifact_model.pth')

verdict_trainer.py
4 KB